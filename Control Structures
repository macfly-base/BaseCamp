// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

/// @title ControlStructures - A contract demonstrating fizzBuzz and time-based logic.
/// @dev Designed for deployment on Sepolia and other EVM-compatible networks.
contract ControlStructures {
    // Define custom errors
    error AfterHours(uint256 time);
    error AtLunch();

    // Constants for time ranges to save gas
    uint256 private constant MORNING_START = 800;
    uint256 private constant LUNCH_START = 1200;
    uint256 private constant LUNCH_END = 1299;
    uint256 private constant AFTERNOON_END = 1799;
    uint256 private constant EVENING_END = 2200;

    /// @notice FizzBuzz logic to return specific strings based on divisibility.
    /// @param _number The input number to process.
    /// @return response The string response for the given number.
    function fizzBuzz(uint256 _number) public pure returns (string memory response) {
        if (_number % 15 == 0) return "FizzBuzz";
        if (_number % 3 == 0) return "Fizz";
        if (_number % 5 == 0) return "Buzz";
        return "Splat";
    }

    /// @notice Determine the greeting or restriction based on input time.
    /// @param _time The current time in HHMM format (24-hour clock).
    /// @return result The appropriate response or revert if outside working hours.
    function doNotDisturb(uint256 _time) public pure returns (string memory result) {
        // Ensure valid time format
        if (_time >= 2400 || _time % 100 >= 60) revert("Invalid time format");

        if (_time < MORNING_START || _time > EVENING_END) {
            revert AfterHours(_time);
        } else if (_time >= LUNCH_START && _time <= LUNCH_END) {
            revert AtLunch();
        } else if (_time >= MORNING_START && _time < LUNCH_START) {
            return "Morning!";
        } else if (_time > LUNCH_END && _time <= AFTERNOON_END) {
            return "Afternoon!";
        } else {
            return "Evening!";
        }
    }

    /// @notice Emits an event for testing/debugging purposes.
    event TimeChecked(uint256 indexed time, string message);
}
